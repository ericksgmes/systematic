% This file was created with JabRef 2.7.
% Encoding: ISO8859_1

@ARTICLE{Amoretti20104,
  author = {Michele Amoretti and Monica Reggiani},
  title = {Architectural paradigms for robotics applications},
  journal = {Advanced Engineering Informatics},
  year = {2010},
  volume = {24},
  pages = {4 - 13},
  number = {1},
  note = {<ce:title>Informatics for cognitive robots</ce:title>},
  abstract = {In recent years, several technical architectural paradigms have been
	proposed to support the development of distributed and concurrent
	systems. Object-oriented, component-based, service-oriented approaches
	are among the most recent paradigms for the implementation of heterogeneous
	software products that require complex interprocess communications
	and event synchronization. Despite the sharing of common objectives
	with distributed systems research, the robotics community is still
	late in applying these research results in the development of its
	architectures, often relying only on the most basic concepts.
	
	In this paper, we shortly illustrate these paradigms, their characteristics,
	and the successful stories about their application within the robotic
	domain. We discuss benefits and tradeoffs of the different solutions
	with the goal of deriving some practical principles and strategies
	to be exploited in robotics practice. Understanding the characteristics,
	features, advantages, and drawbacks of the different paradigms is,
	indeed, crucial for the successful design, implementation, and use
	of robotic architectures.},
  doi = {10.1016/j.aei.2009.08.004},
  issn = {1474-0346},
  source = {ScienceD},
  url = {http://www.sciencedirect.com/science/article/pii/S1474034609000470}
}

@ARTICLE{Amoretti20104,
  author = {Michele Amoretti and Monica Reggiani},
  title = {Architectural paradigms for robotics applications},
  journal = {Advanced Engineering Informatics},
  year = {2010},
  volume = {24},
  pages = {4 - 13},
  number = {1},
  note = {<ce:title>Informatics for cognitive robots</ce:title>},
  abstract = {In recent years, several technical architectural paradigms have been
	proposed to support the development of distributed and concurrent
	systems. Object-oriented, component-based, service-oriented approaches
	are among the most recent paradigms for the implementation of heterogeneous
	software products that require complex interprocess communications
	and event synchronization. Despite the sharing of common objectives
	with distributed systems research, the robotics community is still
	late in applying these research results in the development of its
	architectures, often relying only on the most basic concepts.

	In this paper, we shortly illustrate these paradigms, their characteristics,
	and the successful stories about their application within the robotic
	domain. We discuss benefits and tradeoffs of the different solutions
	with the goal of deriving some practical principles and strategies
	to be exploited in robotics practice. Understanding the characteristics,
	features, advantages, and drawbacks of the different paradigms is,
	indeed, crucial for the successful design, implementation, and use
	of robotic architectures.},
  doi = {10.1016/j.aei.2009.08.004},
  issn = {1474-0346},
  source = {ScienceD},
  url = {http://www.sciencedirect.com/science/article/pii/S1474034609000470}
}

@ARTICLE{Lukatela1997360,
  author = {Georgije Lukatela and Milan Savić and Zoran Urosević and M.T. Turvey},
  title = {Phonological Ambiguity Impairs Identity Priming in Naming and Lexical
	Decision},
  journal = {Journal of Memory and Language},
  year = {1997},
  volume = {36},
  pages = {360 - 381},
  number = {3},
  abstract = {The priming of a visually presented word by itself means that all
	representations activated by the prime—orthographic, phonological,
	semantic—are of direct relevance to the processing of the target.
	The phonological coherence hypothesis (e.g., Van Orden &amp; Goldinger,
	1994) suggests, however, that the major constraint on the identity
	prime's influence is the time needed to achieve a stable phonological
	code. Serbo-Croatian words such as XAREM (Cyrillic) and ROBOT (Roman)
	support two phonological codes, one corresponding to the word and
	one to a nonword. The nonwords XAREM and ROBOT composed from mixed
	Roman and Cyrillic letters have single phonological codes corresponding
	to the word readings of XAPEM and ROBOT. With prime-target SOAs ≤
	70 ms, the target was primed by the nonword better than by itself
	in both naming and lexical decision tasks. At an SOA of 250 ms, the
	nonword and the identity prime primed equally. Discussion focused
	on the primacy of phonological codes in visual word recognition.},
  doi = {10.1006/jmla.1996.2490},
  issn = {0749-596X},
  source = {ScienceD},
  url = {http://www.sciencedirect.com/science/article/pii/S0749596X96924900}
}

@ARTICLE{Tsai20081392,
  author = {W.T. Tsai and Xin Sun and Qian Huang and Helen Karatza},
  title = {An ontology-based collaborative service-oriented simulation framework
	with Microsoft Robotics Studio®},
  journal = {Simulation Modelling Practice and Theory},
  year = {2008},
  volume = {16},
  pages = {1392 - 1414},
  number = {9},
  abstract = {In Service-Oriented Architecture (SOA), the concepts that services
	can be discovered and application can be composed via service discovery
	bring great flexibility to application development [Y. Chen, W.T.
	Tsai, Distributed Service-Oriented Software Development, Kendall/Hunt,
	2008, [4]]. Microsoft Robotics Studio (MSRS) is a recent initiative
	in applying SOA to embedded systems and one of its key features is
	its 3-D simulation tool that allows applications to be simulated
	before deployment. This paper proposes an ontology-based service-oriented
	simulation framework with MSRS by adding a set of ontology systems,
	i.e., service ontology, workflow ontology, entity ontology, and environment
	ontology. These ontology systems store relevant information useful
	to compose simulation applications, and items stored also cross reference
	to each other to facilitate reusability and rapid application composition,
	This paper then provides a detailed case study on a popular robotic
	game Sumobot using MSRS to illustrate the key concepts and how they
	can support rapid simulation development.1The contents of this paper
	were developed under a grant from US Department of Defense and the
	Fund for the Improvement of Postsecondary Education (FIPSE), US Department
	of Education. However, these contents do not necessarily represent
	the policy of the Department of Education, and you should not assume
	endorsement by the Federal Government. 1},
  doi = {10.1016/j.simpat.2008.07.007},
  issn = {1569-190X},
  keywords = {Service-oriented computing},
  source = {ScienceD},
  url = {http://www.sciencedirect.com/science/article/pii/S1569190X08001421}
}

@ARTICLE{Veiga2009746,
  author = {G. Veiga and J.N. Pires and K. Nilsson},
  title = {Experiments with service-oriented architectures for industrial robotic
	cells programming},
  journal = {Robotics and Computer-Integrated Manufacturing},
  year = {2009},
  volume = {25},
  pages = {746 - 755},
  number = {4-5},
  abstract = {Integration of equipment in industrial robot cells is to an increasing
	part involved with interfacing modern Ethernet technologies and low-cost
	mass produced devices, such as vision systems, laser cameras, force–torque
	sensors, soft-PLCs, digital pens, pocket-PCs, etc. This scenario
	enables integrators to offer powerful and smarter solutions, more
	adapted to small and medium enterprises (SMEs), capable of integrating
	process knowledge and interface better with humans. Nevertheless,
	programming all these devices efficiently requires too much specific
	knowledge about the devices, their hardware architectures and specific
	programming languages, details about system communication low-level
	protocols, and other tricky details at the system level. To address
	these issues, this paper describes and analyses two of the most interesting
	service-oriented architectures (SOA) available, which exhibit characteristics
	that are well adapted to industrial robotics cells. To compare, discuss
	and evaluate their programming features and applicability a test
	bed was specially designed, and the two SOA are fully implemented
	to program the test bed. Special focus is given to the way services
	are specified and to the orchestration tools used to manage system
	logic. The obtained results show clearly that using integrations
	schemes based on SOA reduces system integration time and are more
	adapted to industrial robotic cell system integrators.},
  doi = {10.1016/j.rcim.2008.09.001},
  issn = {0736-5845},
  keywords = {Industrial robotic cell programming},
  source = {ScienceD},
  url = {http://www.sciencedirect.com/science/article/pii/S0736584508000902}
}

